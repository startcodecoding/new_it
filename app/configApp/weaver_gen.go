package configApp

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"fmt"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"new_it/app/configApp/model"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:     "new_it/app/configApp/ConfigApp",
		Iface:    reflect.TypeOf((*ConfigApp)(nil)).Elem(),
		New:      func() any { return &config_app{} },
		ConfigFn: func(i any) any { return i.(*config_app).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return configApp_local_stub{impl: impl.(ConfigApp), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return configApp_client_stub{stub: stub, getDBTypeMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "new_it/app/configApp/ConfigApp", Method: "GetDBType"}), getConfigMysqlMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "new_it/app/configApp/ConfigApp", Method: "GetConfigMysql"}), getConfigJWTMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "new_it/app/configApp/ConfigApp", Method: "GetConfigJWT"}), getConfigConfigInfoMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "new_it/app/configApp/ConfigApp", Method: "GetConfigConfigInfo"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return configApp_server_stub{impl: impl.(ConfigApp), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type configApp_local_stub struct {
	impl   ConfigApp
	tracer trace.Tracer
}

func (s configApp_local_stub) GetDBType(ctx context.Context) (r0 string, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "configApp.ConfigApp.GetDBType", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetDBType(ctx)
}

func (s configApp_local_stub) GetConfigMysql(ctx context.Context) (r0 model.Mysql, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "configApp.ConfigApp.GetConfigMysql", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConfigMysql(ctx)
}

func (s configApp_local_stub) GetConfigJWT(ctx context.Context) (r0 model.JWT, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "configApp.ConfigApp.GetConfigJWT", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConfigJWT(ctx)
}

func (s configApp_local_stub) GetConfigConfigInfo(ctx context.Context) (r0 *ConfigInfo, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "configApp.ConfigApp.GetConfigConfigInfo", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetConfigConfigInfo(ctx)
}

// Client stub implementations.

type configApp_client_stub struct {
	stub                       codegen.Stub
	getDBTypeMetrics           *codegen.MethodMetrics
	getConfigMysqlMetrics      *codegen.MethodMetrics
	getConfigJWTMetrics        *codegen.MethodMetrics
	getConfigConfigInfoMetrics *codegen.MethodMetrics
}

func (s configApp_client_stub) GetDBType(ctx context.Context) (r0 string, err error) {
	// Update metrics.
	start := time.Now()
	s.getDBTypeMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "configApp.ConfigApp.GetDBType", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getDBTypeMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getDBTypeMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.getDBTypeMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 3, nil, shardKey)
	if err != nil {
		return
	}
	s.getDBTypeMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = dec.String()
	err = dec.Error()
	return
}

func (s configApp_client_stub) GetConfigMysql(ctx context.Context) (r0 model.Mysql, err error) {
	// Update metrics.
	start := time.Now()
	s.getConfigMysqlMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "configApp.ConfigApp.GetConfigMysql", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getConfigMysqlMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getConfigMysqlMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.getConfigMysqlMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 2, nil, shardKey)
	if err != nil {
		return
	}
	s.getConfigMysqlMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s configApp_client_stub) GetConfigJWT(ctx context.Context) (r0 model.JWT, err error) {
	// Update metrics.
	start := time.Now()
	s.getConfigJWTMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "configApp.ConfigApp.GetConfigJWT", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getConfigJWTMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getConfigJWTMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.getConfigJWTMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 1, nil, shardKey)
	if err != nil {
		return
	}
	s.getConfigJWTMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s configApp_client_stub) GetConfigConfigInfo(ctx context.Context) (r0 *ConfigInfo, err error) {
	// Update metrics.
	start := time.Now()
	s.getConfigConfigInfoMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "configApp.ConfigApp.GetConfigConfigInfo", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getConfigConfigInfoMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getConfigConfigInfoMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.getConfigConfigInfoMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	if err != nil {
		return
	}
	s.getConfigConfigInfoMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ConfigInfo_dceed68e(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type configApp_server_stub struct {
	impl    ConfigApp
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s configApp_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "GetDBType":
		return s.getDBType
	case "GetConfigMysql":
		return s.getConfigMysql
	case "GetConfigJWT":
		return s.getConfigJWT
	case "GetConfigConfigInfo":
		return s.getConfigConfigInfo
	default:
		return nil
	}
}

func (s configApp_server_stub) getDBType(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetDBType(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.String(r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s configApp_server_stub) getConfigMysql(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConfigMysql(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s configApp_server_stub) getConfigJWT(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConfigJWT(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s configApp_server_stub) getConfigConfigInfo(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetConfigConfigInfo(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ConfigInfo_dceed68e(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &ConfigInfo{}

func (x *ConfigInfo) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ConfigInfo.WeaverMarshal: nil receiver"))
	}
	enc.String(x.DbType)
	(x.JWT).WeaverMarshal(enc)
	(x.Mysql).WeaverMarshal(enc)
}

func (x *ConfigInfo) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ConfigInfo.WeaverUnmarshal: nil receiver"))
	}
	x.DbType = dec.String()
	(&x.JWT).WeaverUnmarshal(dec)
	(&x.Mysql).WeaverUnmarshal(dec)
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_ConfigInfo_dceed68e(enc *codegen.Encoder, arg *ConfigInfo) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_ConfigInfo_dceed68e(dec *codegen.Decoder) *ConfigInfo {
	if !dec.Bool() {
		return nil
	}
	var res ConfigInfo
	(&res).WeaverUnmarshal(dec)
	return &res
}
